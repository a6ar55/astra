#!/usr/bin/env python3

"""
Comprehensive test to verify RAG system is working correctly
Tests the complete pipeline: Firebase -> RAG -> Chat API -> Context Retrieval
"""

import requests
import json
import time
from rag_service_v2 import enhanced_rag_service

def test_complete_rag_pipeline():
    """Test the complete RAG pipeline end-to-end"""
    
    print("üöÄ COMPREHENSIVE RAG SYSTEM TEST")
    print("=" * 50)
    
    test_user_id = 'user_2nEKPmVdWvV6T8DaKGg6K0Ap2OH'
    base_url = 'http://localhost:8000'
    
    # Step 1: Check RAG status directly
    print("\n1Ô∏è‚É£ TESTING RAG SERVICE DIRECTLY")
    try:
        rag_status = enhanced_rag_service.debug_status()
        print(f"   ‚úÖ RAG Reports Cached: {rag_status['reports_cached']}")
        print(f"   ‚úÖ Model Loaded: {rag_status['model_loaded']}")
        print(f"   ‚úÖ Database Path: {rag_status['database_path']}")
        
        if rag_status['reports_cached'] == 0:
            print("   ‚ö†Ô∏è  WARNING: No reports in RAG cache!")
            return False
            
    except Exception as e:
        print(f"   ‚ùå RAG Service Error: {e}")
        return False
    
    # Step 2: Test RAG search directly
    print("\n2Ô∏è‚É£ TESTING RAG SEARCH FUNCTIONALITY")
    try:
        test_query = "summarize the reports"
        search_results = enhanced_rag_service.search_reports(test_query, user_id=test_user_id, top_k=3)
        print(f"   ‚úÖ Search Results: {len(search_results)} found")
        
        context = enhanced_rag_service.get_context_for_query(test_query, user_id=test_user_id, max_reports=2)
        has_context = "No relevant threat intelligence found" not in context
        print(f"   ‚úÖ Context Generated: {'Yes' if has_context else 'No'}")
        
        if not has_context:
            print("   ‚ùå ERROR: Context generation failed!")
            return False
            
    except Exception as e:
        print(f"   ‚ùå RAG Search Error: {e}")
        return False
    
    # Step 3: Test Chat Health API
    print("\n3Ô∏è‚É£ TESTING CHAT HEALTH API")
    try:
        health_response = requests.post(f'{base_url}/api/chat/health', 
                                       json={'check_type': 'detailed'}, 
                                       timeout=10)
        
        if health_response.status_code == 200:
            health_data = health_response.json()
            chat_enabled = health_data.get('chat_enabled', False)
            reports_cached = health_data.get('rag_service', {}).get('reports_cached', 0)
            
            print(f"   ‚úÖ Chat Enabled: {chat_enabled}")
            print(f"   ‚úÖ API Reports Count: {reports_cached}")
            
            if not chat_enabled or reports_cached == 0:
                print("   ‚ùå ERROR: Chat not enabled or no reports in API!")
                return False
        else:
            print(f"   ‚ùå Health API Error: {health_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Health API Error: {e}")
        return False
    
    # Step 4: Test Chat Message API with context
    print("\n4Ô∏è‚É£ TESTING CHAT MESSAGE API")
    try:
        test_message = "Please provide a summary of the main threats and security concerns from my reports"
        
        chat_response = requests.post(f'{base_url}/api/chat/message',
                                     json={'message': test_message},
                                     headers={'user_id': test_user_id},
                                     timeout=30)
        
        if chat_response.status_code == 200:
            response_data = chat_response.json()
            context_used = response_data.get('context_used', False)
            reports_found = response_data.get('reports_found', 0)
            ai_response = response_data.get('response', '')
            
            print(f"   ‚úÖ Response Status: 200 OK")
            print(f"   ‚úÖ Context Used: {context_used}")
            print(f"   ‚úÖ Reports Found: {reports_found}")
            print(f"   ‚úÖ Response Length: {len(ai_response)} chars")
            
            if not context_used or reports_found == 0:
                print("   ‚ùå ERROR: Context not used or no reports found!")
                print(f"   üîç Response preview: {ai_response[:200]}...")
                return False
                
            print(f"   üìù AI Response Preview: {ai_response[:150]}...")
            
        else:
            print(f"   ‚ùå Chat API Error: {chat_response.status_code}")
            print(f"   üìÑ Error Details: {chat_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Chat Message Error: {e}")
        return False
    
    # Step 5: Test Migration API (if needed)
    print("\n5Ô∏è‚É£ TESTING MIGRATION API")
    try:
        migrate_response = requests.post(f'{base_url}/api/chat/rag/migrate',
                                        headers={'user_id': test_user_id},
                                        timeout=30)
        
        if migrate_response.status_code == 200:
            migrate_data = migrate_response.json()
            migrated_items = migrate_data.get('migrated_items', 0)
            final_reports = migrate_data.get('final_rag_reports', 0)
            
            print(f"   ‚úÖ Migration Status: Success")
            print(f"   ‚úÖ Items Migrated: {migrated_items}")
            print(f"   ‚úÖ Final RAG Reports: {final_reports}")
            
        else:
            print(f"   ‚ö†Ô∏è  Migration API: {migrate_response.status_code} (might be expected)")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Migration API Error: {e} (might be expected)")
    
    print("\nüéâ ALL TESTS PASSED!")
    print("=" * 50)
    print("‚úÖ RAG system is fully functional")
    print("‚úÖ Context retrieval is working")  
    print("‚úÖ Chat API provides intelligent responses")
    print("‚úÖ UI should show correct report counts")
    print("‚úÖ Intelligence Context Applied should appear")
    
    return True

def test_specific_queries():
    """Test specific types of queries to verify RAG performance"""
    
    print("\nüîç TESTING SPECIFIC QUERY TYPES")
    print("=" * 40)
    
    test_user_id = 'user_2nEKPmVdWvV6T8DaKGg6K0Ap2OH'
    base_url = 'http://localhost:8000'
    
    test_queries = [
        "What are the main cyber threats?",
        "Summarize the threat intelligence reports",
        "Tell me about extremist activities",
        "What security recommendations do you have?",
        "What is the risk level of current threats?"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. Testing: '{query}'")
        
        try:
            response = requests.post(f'{base_url}/api/chat/message',
                                   json={'message': query},
                                   headers={'user_id': test_user_id},
                                   timeout=25)
            
            if response.status_code == 200:
                data = response.json()
                context_used = data.get('context_used', False)
                reports_found = data.get('reports_found', 0)
                
                print(f"   ‚úÖ Context: {'Used' if context_used else 'Not Used'}")
                print(f"   üìä Reports: {reports_found}")
                
                if context_used:
                    print(f"   üéØ SUCCESS - Intelligence enhanced response")
                else:
                    print(f"   ‚ö†Ô∏è  WARNING - Generic response (no context)")
                    
            else:
                print(f"   ‚ùå ERROR: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå ERROR: {e}")
    
    print("\n‚úÖ Query testing complete!")

if __name__ == "__main__":
    print("Starting comprehensive RAG system verification...")
    
    # Run main pipeline test
    pipeline_success = test_complete_rag_pipeline()
    
    if pipeline_success:
        # Run specific query tests
        test_specific_queries()
        
        print("\nüöÄ FINAL RESULT: RAG SYSTEM IS WORKING CORRECTLY!")
        print("\nüìã What you should see in the UI:")
        print("   ‚Ä¢ Reports count should be > 0")
        print("   ‚Ä¢ 'Intelligence Context Applied' badge should appear")
        print("   ‚Ä¢ Chat responses should reference your actual data")
        print("   ‚Ä¢ No 'No relevant context found' messages")
        
    else:
        print("\n‚ùå FINAL RESULT: RAG SYSTEM NEEDS ATTENTION")
        print("   Please check the errors above and fix before proceeding.") 